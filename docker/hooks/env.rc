### All variables in capitals can be set also by environment.

# DEPRECATED: Building on Docker Hub is deprecated and it will be removed.
# DEPRECATED: GitHub Actions workflows are deprecated and they will be removed.
# DEPRECATED: README publishing is deprecated and it will be removed.

### build context is the path to the Dockerfile
### it is expected that '_mydir' is already set by the calling script
declare _build_context="$(dirname ${_mydir})"

### Docker Hub: GitHub source branch to use
### local: virtual source branch (technically always the current git branch)
declare _branch="${SOURCE_BRANCH:-$1}"

### which image variation to build (feature blend)
declare _blend="${DOCKER_TAG:-$2}"

### building stage
# DEPRECATED: The variable '_stage' is deprecated and it will be removed.
declare _stage

### owner of the builder and deployment repositories must be the same
declare _owner

# DEPRECATED: This 'if' block is deprecated and it will be replaced.
if [ $# -ge 2 ] ; then

    shift 2
    _stage="local"

    ### you can change the local owner if you only want to build locally and you don't need
    ### to compare the verbose version sticker against the value from the builder GitHub Gist
    ### (as it's implemented in the 'pre_build' hook script)
    # _owner="dev"
    _owner="accetto"

    ### supporting local testing of the complete CI workflow
    if [ -f "${_build_context}"/hooks/secrets.rc ] ; then
        source "${_build_context}"/hooks/secrets.rc
    fi

else
    _stage="dockerhub"
    _owner="accetto"
fi

### 'DOCKER_REPO' is the repository where the image is built (builder repository)
### it is initialized by the environment on Docker Hub
### example: 'index.docker.io/accetto/headless-drawing-g3' by building on Docker Hub
### example: 'local/ubuntu-g3' by building locally
DOCKER_REPO=${DOCKER_REPO:-${_owner}/dev-headless-drawing-g3}

### 'DOCKER_TAG' is the tag in the repository where the image is built
DOCKER_TAG="${_blend}"

### '_deploy_repo' is the repository where the image will be (additionally) deployed (deployment repository)
### deploy repository could be also identical with the builder repository
# declare _deploy_repo="${DOCKER_REPO}"
# declare _deploy_repo="${_owner}/${DEPLOY_REPO:-headless-drawing-g3}"
declare _deploy_repo

### array of the image tags to be deployed
declare -a _deploy_tags

### relative path to the readme file resources (relative to the project root)
declare _readme_context

### GitHub repo and branch containing the post_push workflow to trigger
# DEPRECATED: Variables 'POST_PUSH_WORKFLOW_REPO' and 'POST_PUSH_WORKFLOW_BRANCH' are deprecated and will be removed.
POST_PUSH_WORKFLOW_REPO=${POST_PUSH_WORKFLOW_REPO:-"headless-drawing-g3"}
POST_PUSH_WORKFLOW_BRANCH=${POST_PUSH_WORKFLOW_BRANCH:-"master"}

### examples
# VERSION_STICKER_PREFIX=${VERSION_STICKER_SUFFIX:-"LOCAL-"}
# VERSION_STICKER_SUFFIX=${VERSION_STICKER_SUFFIX:-"-BETA"}

### Features can be enabled or disabled by setting the related variables.
### Setting it to "0" disables the feature.
### Setting it to "1" enforces the feature.
### Anything else, including null and empty string, does not change the feature's default value.
### NOTE: They are also other feature environment variables that are set directly in the Dockerfile.
### FEATURES_BUILD_SLIM: if to add '--no-install-recommends' to 'apt-get install'
### FEATURES_SCREENSHOOTING: if 'xfce4-screenshooter' (+2.0MB) and 'ristretto' (+43.0MB) should be included
### FEATURES_THUMBNAILING: if 'tumbler' (+19.0MB) should be included
### FEATURES_USER_GROUP_OVERRIDE: if overriding container's user group should be supported
### Remark: There are also 'FEATURES_*' variables that are always set, e.g. 'FEATURES_VERSION_STICKER=1'.

### These features influence the content of almost all stages:
if [ "${FEATURES_BUILD_SLIM}" == "0" ] ; then FEATURES_BUILD_SLIM="" ; else FEATURES_BUILD_SLIM=1 ; fi

### These features influence user permissions inside the image:
if [ "${FEATURES_USER_GROUP_OVERRIDE}" == "1" ] ; then FEATURES_USER_GROUP_OVERRIDE=1 ; else FEATURES_USER_GROUP_OVERRIDE="" ; fi

### These features influence the content of the related stages:
if [ "${FEATURES_SCREENSHOOTING}" == "1" ] ; then FEATURES_SCREENSHOOTING=1 ; else FEATURES_SCREENSHOOTING="" ; fi
if [ "${FEATURES_THUMBNAILING}" == "1" ] ; then FEATURES_THUMBNAILING=1 ; else FEATURES_THUMBNAILING="" ; fi

### These features influence the building graph:
if [ "${FEATURES_BLENDER}" == "1" ] ; then FEATURES_BLENDER=1 ; else FEATURES_BLENDER="" ; fi
if [ "${FEATURES_CHROMIUM}" == "1" ] ; then FEATURES_CHROMIUM=1 ; else FEATURES_CHROMIUM="" ; fi
if [ "${FEATURES_DRAWIO}" == "1" ] ; then FEATURES_DRAWIO=1 ; else FEATURES_DRAWIO="" ; fi
if [ "${FEATURES_FIREFOX}" == "1" ] ; then FEATURES_FIREFOX=1 ; else FEATURES_FIREFOX="" ; fi
if [ "${FEATURES_FIREFOX_PLUS}" == "1" ] ; then FEATURES_FIREFOX_PLUS=1 ; else FEATURES_FIREFOX_PLUS="" ; fi
if [ "${FEATURES_FREECAD}" == "1" ] ; then FEATURES_FREECAD=1 ; else FEATURES_FREECAD="" ; fi
if [ "${FEATURES_GIMP}" == "1" ] ; then FEATURES_GIMP=1 ; else FEATURES_GIMP="" ; fi
if [ "${FEATURES_INKSCAPE}" == "1" ] ; then FEATURES_INKSCAPE=1 ; else FEATURES_INKSCAPE="" ; fi
if [ "${FEATURES_MESA}" == "1" ] ; then FEATURES_MESA=1 ; else FEATURES_MESA="" ; fi
if [ "${FEATURES_NOVNC}" == "1" ] ; then FEATURES_NOVNC=1 ; else FEATURES_NOVNC="" ; fi
if [ "${FEATURES_VIRTUALGL}" == "1" ] ; then FEATURES_VIRTUALGL=1 ; else FEATURES_VIRTUALGL="" ; fi

### The reason for this 'case' is to support some special branches/builds if required.
case "${_branch}" in

    ### default (master), developer (dev, dev-*) and release (v*) builds
    master | dev | dev-* | v* )

        BASEIMAGE=${BASEIMAGE:-"ubuntu"}
        BASETAG=${BASETAG:-"20.04"}

        ### 'DOCKERFILE_PATH' is set by the environment on Docker Hub (relative to the build context)
        ### example: DOCKERFILE_PATH=Dockerfile
        # DOCKERFILE_PATH=${DOCKERFILE_PATH}

        case "${_blend}" in

            ### ---------------------------
            ### ubuntu-vnc-xfce-g3
            ### ubuntu-vnc-xfce-firefox-g3
            ### ubuntu-vnc-xfce-chromium-g3
            ### ---------------------------

            drawio | drawio-* | blender | blender-* | freecad | freecad-* | gimp | gimp-* | inkscape | inkscape-* )

                DOCKERFILE_PATH="${_build_context}/Dockerfile.xfce.drawing"

                FEATURES_SCREENSHOOTING=1
                FEATURES_THUMBNAILING=1

                if [[ ! "${_blend}" =~ -vnc ]] ; then
                    FEATURES_NOVNC=1
                fi

                if [[ "${_blend}" =~ mesa || "${_blend}" =~ blender|freecad ]] ; then

                    FEATURES_MESA=1
                fi

                if [[ "${_blend}" =~ vgl || "${_blend}" =~ blender|freecad ]] ; then

                    FEATURES_VIRTUALGL=1
                    VIRTUALGL_VERSION=$( "${_mydir}"/release_of.sh 'virtualgl' )
                fi

                if [[ "${_blend}" =~ blender ]] ; then

                    FEATURES_BLENDER=1
                    _deploy_repo="${_owner}/ubuntu-vnc-xfce-blender-g3"
                    _readme_context="docker/xfce-blender"

                elif [[ "${_blend}" =~ drawio ]] ; then

                    FEATURES_DRAWIO=1
                    DRAWIO_VERSION=$( "${_mydir}"/release_of.sh 'drawio' )
                    _deploy_repo="${_owner}/ubuntu-vnc-xfce-drawio-g3"
                    _readme_context="docker/xfce-drawio"

                elif [[ "${_blend}" =~ freecad ]] ; then

                    FEATURES_FREECAD=1
                    FREECAD_APPIMAGE=$( "${_mydir}"/release_of.sh 'freecad-appimage' )
                    if [[ -z "${FREECAD_APPIMAGE}" ]] ; then

                        # fall-back to version 0.19.3
                        FREECAD_VERSION="0.19.3"
                        FREECAD_APPIMAGE="FreeCAD_0.19.3-Linux-Conda_glibc2.12-x86_64.AppImage"

                    else
                        FREECAD_VERSION=$( "${_mydir}"/release_of.sh 'freecad' )
                    fi

                    _deploy_repo="${_owner}/ubuntu-vnc-xfce-freecad-g3"
                    _readme_context="docker/xfce-freecad"

                elif [[ "${_blend}" =~ gimp ]] ; then

                    FEATURES_GIMP=1
                    _deploy_repo="${_owner}/ubuntu-vnc-xfce-gimp-g3"
                    _readme_context="docker/xfce-gimp"

                elif [[ "${_blend}" =~ inkscape ]] ; then

                    FEATURES_INKSCAPE=1
                    _deploy_repo="${_owner}/ubuntu-vnc-xfce-inkscape-g3"
                    _readme_context="docker/xfce-inkscape"
                fi

                if [[ "${_blend}" =~ chromium ]] ; then

                    FEATURES_CHROMIUM=1
                    CHROMIUM_VERSION=$( "${_mydir}"/release_of.sh 'chromium-1804' )

                elif [[ "${_blend}" =~ firefox ]] ; then

                    FEATURES_FIREFOX=1
                    FEATURES_FIREFOX_PLUS=1
                fi

                ### Mesa3D, VirtualGL and Firefux-plus are always active
                # _deploytag="vnc${FEATURES_NOVNC:+-novnc}${FEATURES_MESA:+-mesa}${FEATURES_VIRTUALGL:+-vgl}${FEATURES_CHROMIUM:+-chromium}"
                # _deploytag="${_deploytag}${FEATURES_FIREFOX:+-firefox}${FEATURES_FIREFOX_PLUS:+-firefox-plus}"

                if [[ "${_blend}" =~ -vnc ]] ; then

                    ### intended for images without noVNC 
                    _deploytag="vnc${FEATURES_NOVNC:+-novnc}${FEATURES_VIRTUALGL:+-vgl}"
                    _deploytag="${_deploytag}${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}"

                    if [[ "${_blend}" =~ blender|freecad ]] ; then

                        ### remove '-vgl'
                        _deploytag=${_deploytag/-vgl/}
                    fi

                else

                    ### intended for images with both VNC and noVNC (latest)
                    _deploytag="latest${FEATURES_FIREFOX:+-firefox}"${FEATURES_CHROMIUM:+-chromium}
                fi

                ### vnc-novnc -> latest
                _deploytag=( "${_deploytag/vnc-novnc/latest}" )

                ### remove 'latest-'
                _deploytag=( "${_deploytag/latest-/}" )

                _deploy_tags=( "${_deploytag}" )
                ;;

            ### -----------------------------------------------
            ### accetto/ubuntu-vnc-xfce-opengl-g3 (base images)
            ### -----------------------------------------------
            
            latest | latest-* | vnc | vnc-* )

                DOCKERFILE_PATH="${_build_context}/Dockerfile.xfce"
                _deploy_repo="${_owner}/ubuntu-vnc-xfce-opengl-g3"
                _readme_context="docker/xfce"

                if [[ "${_blend}" =~ novnc || "${_blend}" =~ "latest" ]] ; then
                    FEATURES_NOVNC=1
                fi

                ### Mesa3D is always active
                # if [[ "${_blend}" =~ mesa ]] ; then
                #     FEATURES_MESA=1
                # fi
                FEATURES_MESA=1

                ### VirtualGL is always active
                # if [[ "${_blend}" =~ vgl ]] ; then
                #     FEATURES_VIRTUALGL=1
                #     VIRTUALGL_VERSION=$( "${_mydir}"/release_of.sh 'virtualgl' )
                # fi
                FEATURES_VIRTUALGL=1
                VIRTUALGL_VERSION=$( "${_mydir}"/release_of.sh 'virtualgl' )

                if [[ "${_blend}" =~ chromium ]] ; then
                    FEATURES_CHROMIUM=1
                    CHROMIUM_VERSION=$( "${_mydir}"/release_of.sh 'chromium-1804' )

                elif [[ "${_blend}" =~ firefox ]] ; then
                    FEATURES_FIREFOX=1
                    FEATURES_FIREFOX_PLUS=1
                fi

                ### Mesa3D, VirtualGL and Firefux-plus are always active
                # _deploytag="vnc${FEATURES_NOVNC:+-novnc}${FEATURES_MESA:+-mesa}${FEATURES_VIRTUALGL:+-vgl}${FEATURES_CHROMIUM:+-chromium}"
                # _deploytag="${_deploytag}${FEATURES_FIREFOX:+-firefox}${FEATURES_FIREFOX_PLUS:+-firefox-plus}"

                _deploytag="vnc${FEATURES_NOVNC:+-novnc}${FEATURES_CHROMIUM:+-chromium}"
                _deploytag="${_deploytag}${FEATURES_FIREFOX:+-firefox}"

                ### vnc-novnc -> latest
                _deploytag=( "${_deploytag/vnc-novnc/latest}" )

                ### remove 'latest-'
                _deploytag=( "${_deploytag/latest-/}" )

                _deploy_tags=( "${_deploytag}" )
                ;;

            *)
                echo "Unsupported blend '${_blend}'"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Unsupported branch '${_branch}'"
        exit 1
        ;;
esac
