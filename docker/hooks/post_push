#!/bin/bash

### 2022-09-11 Warning
### It seems like the README publishing is currently not always working.
### Some changes on the Docker Hub side seem to be the reason.
### However, you can always copy the content generated by the utility
### 'util-readme.sh' ('preview' command) to the Docker Hub manually.

echo -e "\n==> EXECUTING @$(date -u +'%Y-%m-%d_%H-%M-%S'): ${0} $@\n"

declare _mydir=$(dirname $0)
source "${_mydir}"/env.rc
source "${_mydir}"/util.rc

main() {
    ### There is a GitHub Gist containing the endpoints for the badges.
    ### Updating the GitHub Gist can be skipped by *not* setting the environment variable GIST_TOKEN.
    ### Warning! The value of the GIST_TOKEN is a real secret.
    ### The personal access token (PAT) should be created on the GitHub and it requires the 'gist' scope.

    local created
    local version_sticker
    local version_sticker_verbose
    local repo_building="${DOCKER_REPO##*/}"
    local repo_deploy="${_deploy_repo##*/}"
    local keeper_repo_tag="${_deploy_builder_tags[0]}"

    if [[ ! -f "${_build_context}/${_scrap_demand_stop_building}" ]]; then

        ### essential environment variables must be already set
        if [[ -n "${GIST_TOKEN}" && -n "${GIST_ID}" && -n "${DEPLOY_GIST_ID}" ]]; then

            if [[ (-n "${repo_deploy}" && "${repo_deploy}" != "${_prohibited_repo_name}") ||
                ("${FORCE_PUBLISHING_BUILDER_REPO:-0}" == "1" && -n "${repo_building}" && "${repo_building}" != "${_prohibited_repo_name}") ]]; then

                ### get values for badges from the image metadata (labels) - try the builder image first
                ensure_image "${DOCKER_REPO}:${keeper_repo_tag}"
                if [[ $? -eq 0 ]]; then

                    ### builder image found
                    echo "Getting badge values from builder image '${DOCKER_REPO}:${keeper_repo_tag}'."

                    created=$(get_label "${DOCKER_REPO}:${keeper_repo_tag}" "org.opencontainers.image.created")
                    version_sticker=$(get_label "${DOCKER_REPO}:${keeper_repo_tag}" "any.accetto.version-sticker")

                    echo Wait... generating verbose sticker file "'${_build_context}/${_scrap_version_sticker_verbose_current}'"
                    docker run --rm "${DOCKER_REPO}:${keeper_repo_tag}" --version-sticker-verbose >"${_build_context}/${_scrap_version_sticker_verbose_current}"

                else
                    echo "Missing builder image '${DOCKER_REPO}:${keeper_repo_tag}'."

                    ### try the deployment image instead (e.g. it could be downloaded manually)
                    ensure_image "${_deploy_repo}:${_deploy_tags[0]}"
                    if [[ $? -eq 0 ]]; then

                        ### deployment image found
                        echo "Getting badge values from deployment image '${DOCKER_REPO}:${_deploy_tags[0]}'."

                        created=$(get_label "${_deploy_repo}:${_deploy_tags[0]}" "org.opencontainers.image.created")
                        version_sticker=$(get_label "${_deploy_repo}:${_deploy_tags[0]}" "any.accetto.version-sticker")

                        echo Wait... generating current verbose sticker file "'${_build_context}/${_scrap_version_sticker_verbose_current}'"
                        docker run --rm "${_deploy_repo}:${_deploy_tags[0]}" --version-sticker-verbose >"${_build_context}/${_scrap_version_sticker_verbose_current}"
                    else
                        ### no suitable image found - unable to update badge endpoints
                        echo "Missing deployment image '${_deploy_repo}:${_deploy_tags[0]}'."

                        echo "Skipping gist update. Unable to get values for badges."
                    fi
                fi

                if [[ -n "${created}" ]]; then

                    version_sticker_verbose=$(cat "${_build_context}/${_scrap_version_sticker_verbose_current}")

                    # echo
                    echo "Badge 'created': ${created}"
                    echo "Badge 'version_sticker': ${version_sticker}"
                    echo "Badge 'version_sticker_verbose':"
                    echo "${version_sticker_verbose}"
                    echo

                    ### update badge endpoints in the builder repository gist
                    for t in "${_deploy_builder_tags[@]}"; do

                        echo
                        echo "Updating builder gists for '${DOCKER_REPO}:${t}'"

                        update_gist "${GIST_ID}" "${_gist_key_created}" "${DOCKER_REPO}" "${t}" "${created}"
                        update_gist "${GIST_ID}" "${_gist_key_version_sticker}" "${DOCKER_REPO}" "${t}" "${version_sticker}"
                        update_gist "${GIST_ID}" "${_gist_key_version_sticker_verbose}" "${DOCKER_REPO}" "${t}" "${version_sticker_verbose}"
                    done
                fi
            else
                echo "Skipping builder gist update because of null or prohibited target repositories."
            fi

            ### update badge endpoints for all tags in the deployment repository
            if [[ -n "${created}" ]]; then

                if [[ -n "${repo_deploy}" && "${repo_deploy}" != "${_prohibited_repo_name}" ]]; then

                    for t in "${_deploy_tags[@]}"; do

                        ### note that the builder and deployment repositories could be identical
                        ### in that case skip the tag which has been already published above
                        if [[ "${DOCKER_REPO}" != "${_deploy_repo}" || "${keeper_repo_tag}" != "${t}" ]]; then

                            echo
                            echo "Updating deployment gists for '${_deploy_repo}:${t}'"

                            update_gist "${DEPLOY_GIST_ID}" "${_gist_key_created}" "${_deploy_repo}" "${t}" "${created}"
                            update_gist "${DEPLOY_GIST_ID}" "${_gist_key_version_sticker}" "${_deploy_repo}" "${t}" "${version_sticker}"
                            update_gist "${DEPLOY_GIST_ID}" "${_gist_key_version_sticker_verbose}" "${_deploy_repo}" "${t}" "${version_sticker_verbose}"
                        fi
                    done
                else
                    echo -e "\nSkipping update of deployment gist because of null or prohibited deployment repository.\n"
                fi
            fi
        else
            echo "Skipping gist update. Required variables not set."
        fi
    fi

    if [[ "${KEEP_HELPER_FILES}" != "1" ]]; then

        echo "Removing helper files"
        cleanup_scrap_files
    fi
}

main $@

echo -e "\n==> FINISHED  @$(date -u +'%Y-%m-%d_%H-%M-%S'): ${0} $@\n"
